/*
 * The MIT License
 *
 * Copyright 2018 PolySwarm PTE. LTD.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package io.polyswarm.app.optionspanel;

import java.util.logging.Logger;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.openide.util.NbBundle;
import org.openide.util.NbBundle.Messages;

final class PolySwarmPanel extends javax.swing.JPanel {

    private static final long serialVersionUID = 1L;
    private static final Logger LOGGER = Logger.getLogger(PolySwarmPanel.class.getName());
    private final PolySwarmOptionsPanelController controller;
    private final PolySwarmMarketplaceSettings settings;

    private ConnectionTestResult connectionTestStatus;

    PolySwarmPanel(PolySwarmOptionsPanelController controller) {
        this.controller = controller;
        this.settings = new PolySwarmMarketplaceSettings();

        initComponents();
        customizeComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        apiUrlPanel = new javax.swing.JPanel();
        apiUrlTextField = new javax.swing.JTextField();
        apiUrlErrorMsgLabel = new javax.swing.JLabel();
        apiKeyPanel = new javax.swing.JPanel();
        apiKeyErrorMsgLabel = new javax.swing.JLabel();
        apiKeyTextField = new javax.swing.JTextField();
        jTextField1 = new javax.swing.JTextField();
        testConnectionButtonPanel = new javax.swing.JPanel();
        testButton = new javax.swing.JButton();
        testConnectionStatusLabel = new javax.swing.JLabel();
        communityPanel = new javax.swing.JPanel();
        communityErrorMsgLabel = new javax.swing.JLabel();
        communityTextField = new javax.swing.JTextField();

        apiUrlPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(PolySwarmPanel.class, "PolySwarmPanel.apiUrlTitle.text"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        apiUrlTextField.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        apiUrlTextField.setText(org.openide.util.NbBundle.getMessage(PolySwarmPanel.class, "PolySwarmPanel.apiUrlTextField.text")); // NOI18N
        apiUrlTextField.setToolTipText(org.openide.util.NbBundle.getMessage(PolySwarmPanel.class, "PolySwarmPanel.apiUrlTextField.toolTipText")); // NOI18N
        apiUrlTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apiUrlTextFieldActionPerformed(evt);
            }
        });

        apiUrlErrorMsgLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        apiUrlErrorMsgLabel.setForeground(new java.awt.Color(255, 0, 0));
        org.openide.awt.Mnemonics.setLocalizedText(apiUrlErrorMsgLabel, org.openide.util.NbBundle.getMessage(PolySwarmPanel.class, "PolySwarmPanel.apiUrlErrorMsgLabel.text")); // NOI18N

        javax.swing.GroupLayout apiUrlPanelLayout = new javax.swing.GroupLayout(apiUrlPanel);
        apiUrlPanel.setLayout(apiUrlPanelLayout);
        apiUrlPanelLayout.setHorizontalGroup(
            apiUrlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(apiUrlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(apiUrlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(apiUrlTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 588, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(apiUrlErrorMsgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 576, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(154, Short.MAX_VALUE))
        );
        apiUrlPanelLayout.setVerticalGroup(
            apiUrlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(apiUrlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(apiUrlTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(apiUrlErrorMsgLabel)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        apiUrlTextField.getAccessibleContext().setAccessibleName("");

        apiKeyPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(PolySwarmPanel.class, "PolySwarmPanel.apiKeyTitle.text"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N
        apiKeyPanel.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        apiKeyPanel.setName(org.openide.util.NbBundle.getMessage(PolySwarmPanel.class, "PolySwarmPanel.apiKeyTitle.text")); // NOI18N

        apiKeyErrorMsgLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        apiKeyErrorMsgLabel.setForeground(new java.awt.Color(255, 0, 0));
        org.openide.awt.Mnemonics.setLocalizedText(apiKeyErrorMsgLabel, org.openide.util.NbBundle.getMessage(PolySwarmPanel.class, "PolySwarmPanel.apiKeyErrorMsgLabel.text")); // NOI18N

        apiKeyTextField.setText(org.openide.util.NbBundle.getMessage(PolySwarmPanel.class, "PolySwarmPanel.apiKeyTextField.text")); // NOI18N
        apiKeyTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apiKeyTextFieldActionPerformed(evt);
            }
        });

        jTextField1.setEditable(false);
        jTextField1.setBackground(java.awt.SystemColor.menu);
        jTextField1.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jTextField1.setForeground(new java.awt.Color(0, 0, 0));
        jTextField1.setText(org.openide.util.NbBundle.getMessage(PolySwarmPanel.class, "PolySwarmPanel.apiKeyHelpLabel.text")); // NOI18N
        jTextField1.setBorder(null);

        javax.swing.GroupLayout apiKeyPanelLayout = new javax.swing.GroupLayout(apiKeyPanel);
        apiKeyPanel.setLayout(apiKeyPanelLayout);
        apiKeyPanelLayout.setHorizontalGroup(
            apiKeyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(apiKeyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(apiKeyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(apiKeyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(apiKeyTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 586, Short.MAX_VALUE)
                        .addComponent(apiKeyErrorMsgLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 586, Short.MAX_VALUE))
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        apiKeyPanelLayout.setVerticalGroup(
            apiKeyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, apiKeyPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(apiKeyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(apiKeyErrorMsgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        org.openide.awt.Mnemonics.setLocalizedText(testButton, org.openide.util.NbBundle.getMessage(PolySwarmPanel.class, "PolySwarmPanel.testButton.text")); // NOI18N
        testButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testButtonActionPerformed(evt);
            }
        });

        testConnectionStatusLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(testConnectionStatusLabel, org.openide.util.NbBundle.getMessage(PolySwarmPanel.class, "PolySwarmPanel.testConnectionStatusLabel.text")); // NOI18N

        javax.swing.GroupLayout testConnectionButtonPanelLayout = new javax.swing.GroupLayout(testConnectionButtonPanel);
        testConnectionButtonPanel.setLayout(testConnectionButtonPanelLayout);
        testConnectionButtonPanelLayout.setHorizontalGroup(
            testConnectionButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(testConnectionButtonPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(testButton)
                .addGap(18, 18, 18)
                .addComponent(testConnectionStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 489, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        testConnectionButtonPanelLayout.setVerticalGroup(
            testConnectionButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(testConnectionButtonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(testConnectionButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(testButton)
                    .addComponent(testConnectionStatusLabel))
                .addContainerGap())
        );

        testConnectionStatusLabel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(PolySwarmPanel.class, "PolySwarmPanel.testConnectionStatusLabel.text")); // NOI18N
        testConnectionStatusLabel.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(PolySwarmPanel.class, "PolySwarmPanel.testConnectionStatusLabel.AccessibleContext.accessibleDescription")); // NOI18N

        communityPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(PolySwarmPanel.class, "PolySwarmPanel.communityPanel.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N
        communityPanel.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N

        communityErrorMsgLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        communityErrorMsgLabel.setForeground(new java.awt.Color(255, 0, 0));
        org.openide.awt.Mnemonics.setLocalizedText(communityErrorMsgLabel, org.openide.util.NbBundle.getMessage(PolySwarmPanel.class, "PolySwarmPanel.communityErrorMsgLabel.text")); // NOI18N

        communityTextField.setText(org.openide.util.NbBundle.getMessage(PolySwarmPanel.class, "PolySwarmPanel.communityTextField.text")); // NOI18N

        javax.swing.GroupLayout communityPanelLayout = new javax.swing.GroupLayout(communityPanel);
        communityPanel.setLayout(communityPanelLayout);
        communityPanelLayout.setHorizontalGroup(
            communityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(communityPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(communityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(communityErrorMsgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 586, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(communityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 586, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        communityPanelLayout.setVerticalGroup(
            communityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, communityPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(communityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(communityErrorMsgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(apiUrlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(testConnectionButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(apiKeyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(communityPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(10, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(apiUrlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(communityPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(apiKeyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(testConnectionButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
        );

        apiUrlPanel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(PolySwarmPanel.class, "PolySwarmPanel.apiUrlTitle.text")); // NOI18N
        apiKeyPanel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(PolySwarmPanel.class, "PolySwarmPanel.apiKeyTitle.text")); // NOI18N
        apiKeyPanel.getAccessibleContext().setAccessibleDescription("");
        communityPanel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(PolySwarmPanel.class, "PolySwarmPanel.communityTitle.text")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    @Messages({"PolySwarmPanel.testConnectionStatusFailedLabel.text=Connection Failed.",
        "PolySwarmPanel.testConnectionStatusSuccessLabel.text=Connection Successful."})
    private void testButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testButtonActionPerformed
        connectionTestStatus = ConnectionTestResult.TESTEDOK;

        if (settings.testSettings() == false) {
            connectionTestStatus = ConnectionTestResult.CONNECTION_FAILED;
        }

        if (connectionTestStatus == ConnectionTestResult.TESTEDOK) {
            testConnectionStatusLabel.setText(Bundle.PolySwarmPanel_testConnectionStatusSuccessLabel_text());
            testConnectionStatusLabel.setForeground(new java.awt.Color(0, 0, 0));
        } else {
            testConnectionStatusLabel.setText(Bundle.PolySwarmPanel_testConnectionStatusFailedLabel_text());
            testConnectionStatusLabel.setForeground(new java.awt.Color(255, 0, 0));
        }
        controller.changed();
    }//GEN-LAST:event_testButtonActionPerformed

    private void apiUrlTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apiUrlTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_apiUrlTextFieldActionPerformed

    private void apiKeyTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apiKeyTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_apiKeyTextFieldActionPerformed

    private void customizeComponents() {
        // read settings and initialize GUI
        communityTextField.setText(settings.getCommunity());
        apiUrlTextField.setText(settings.getApiUrl());
        apiKeyTextField.setText(settings.getApiKey());

        // listen to changes in form fields and call controller.changed()
        communityTextField.getDocument().addDocumentListener(new MyDocumentListener());
        apiKeyTextField.getDocument().addDocumentListener(new MyDocumentListener());
        apiUrlTextField.getDocument().addDocumentListener(new MyDocumentListener());

        connectionTestStatus = ConnectionTestResult.UNTESTED;
    }

    private void clearErrorMessages() {
        // clear default error msgs
        apiUrlErrorMsgLabel.setText("");
        communityErrorMsgLabel.setText("");
        apiKeyErrorMsgLabel.setText("");
        testConnectionStatusLabel.setText("");
    }

    void load() {
        clearErrorMessages();
        valid();
    }

    void store() {
        // store modified settings
        settings.saveSettings();
    }

    boolean testedOk() {
        return connectionTestStatus == ConnectionTestResult.TESTEDOK;
    }

    @Messages({"PolySwarmPanel.testConnectionStatusUntestedLabel.text=Click Test Connection button to verify connectivity."})
    boolean enableTestButton(boolean enable) {
        testButton.setEnabled(enable);

        if (enable && connectionTestStatus == ConnectionTestResult.UNTESTED) {
            testConnectionStatusLabel.setText(Bundle.PolySwarmPanel_testConnectionStatusUntestedLabel_text());
            testConnectionStatusLabel.setForeground(new java.awt.Color(255, 0, 0));
        }
        return true;
    }

    /**
     * Validate the API Key. Set error message if invalid.
     *
     * @return true if valid, else false
     */
    boolean validApiKey() {
        boolean isValid = settings.setApiKey(apiKeyTextField.getText());
        if (!isValid) {
            apiKeyErrorMsgLabel.setText(NbBundle.getMessage(this.getClass(), "PolySwarmPanel.apiKeyErrorMsgLabel.text"));
        }

        return isValid;
    }

    /**
     * Validate the API Key. Set error message if invalid.
     *
     * @return true if valid, else false
     */
    boolean validCommunity() {
        boolean isValid = settings.setCommunity(communityTextField.getText());
        if (!isValid) {
            communityErrorMsgLabel.setText(NbBundle.getMessage(this.getClass(), "PolySwarmPanel.communityErrorMsgLabel.text"));
        }

        return isValid;
    }

    /**
     * Validate the URL
     *
     * @return true if valid, else false
     */
    boolean validURL() {
        boolean isValid = settings.setApiUrl(apiUrlTextField.getText());
        if (!isValid) {
            apiUrlErrorMsgLabel.setText(NbBundle.getMessage(this.getClass(), "PolySwarmPanel.apiUrlErrorMsgLabel.text"));
        }

        return isValid;
    }

    /**
     * Validate the fields are completed correctly and that a connection test was successful.
     *
     * @return true if all valid and successful test, else false
     */
    boolean valid() {
        // check whether form data is complete and has valid content
        // check each element so we get error nofications for all invalid fields.
        boolean result = true;

        result &= validApiKey();
        result &= validURL();
        result &= validCommunity();

        // if fields are populated correctly, enable the test button
        enableTestButton(result);

        return result;
    }

    /**
     * Used to listen for changes in text boxes. It lets the panel know things have been updated and that validation
     * needs to happen.
     */
    private class MyDocumentListener implements DocumentListener {

        @Override
        public void changedUpdate(DocumentEvent e) {
            // Plain text components do not fire these events
            clearErrorMessages();
            connectionTestStatus = ConnectionTestResult.UNTESTED;
            controller.changed();
        }

        @Override
        public void insertUpdate(DocumentEvent e) {
            clearErrorMessages();
            connectionTestStatus = ConnectionTestResult.UNTESTED;
            controller.changed();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            clearErrorMessages();
            connectionTestStatus = ConnectionTestResult.UNTESTED;
            controller.changed();
        }
    }

    private enum ConnectionTestResult {
        UNTESTED,
        CONNECTION_FAILED,
        TESTEDOK;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel apiKeyErrorMsgLabel;
    private javax.swing.JPanel apiKeyPanel;
    private javax.swing.JTextField apiKeyTextField;
    private javax.swing.JLabel apiUrlErrorMsgLabel;
    private javax.swing.JPanel apiUrlPanel;
    private javax.swing.JTextField apiUrlTextField;
    private javax.swing.JLabel communityErrorMsgLabel;
    private javax.swing.JPanel communityPanel;
    private javax.swing.JTextField communityTextField;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton testButton;
    private javax.swing.JPanel testConnectionButtonPanel;
    private javax.swing.JLabel testConnectionStatusLabel;
    // End of variables declaration//GEN-END:variables
}
