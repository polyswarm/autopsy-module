/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package io.polyswarm.swarmit.optionspanel;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.openide.util.NbBundle;
import org.openide.util.NbBundle.Messages;

final class SwarmItPanel extends javax.swing.JPanel {

    private static final long serialVersionUID = 1L;
    private static final Logger LOGGER = Logger.getLogger(SwarmItPanel.class.getName());
    private final SwarmItOptionsPanelController controller;
    private final SwarmItMarketplaceSettings settings;

    private ConnectionTestResult connectionTestStatus;
    
    SwarmItPanel(SwarmItOptionsPanelController controller) {
        this.controller = controller;
        this.settings = new SwarmItMarketplaceSettings();

        initComponents();
        customizeComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        apiUrlPanel = new javax.swing.JPanel();
        apiUrlTextField = new javax.swing.JTextField();
        apiUrlErrorMsgLabel = new javax.swing.JLabel();
        apiKeyPanel = new javax.swing.JPanel();
        apiKeyErrorMsgLabel = new javax.swing.JLabel();
        apiKeyTextArea = new javax.swing.JTextArea();
        nctAmountPanel = new javax.swing.JPanel();
        defaultNctAmountTextField = new javax.swing.JTextField();
        nctAmountUnitLabel = new javax.swing.JLabel();
        nctAmountErrorMsgLabel = new javax.swing.JLabel();
        testConnectionButtonPanel = new javax.swing.JPanel();
        testButton = new javax.swing.JButton();
        testConnectionStatusLabel = new javax.swing.JLabel();

        apiUrlPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(SwarmItPanel.class, "SwarmItPanel.apiUrlTitle.text"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        apiUrlTextField.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        apiUrlTextField.setText(org.openide.util.NbBundle.getMessage(SwarmItPanel.class, "SwarmItPanel.apiUrlTextField.text")); // NOI18N
        apiUrlTextField.setToolTipText(org.openide.util.NbBundle.getMessage(SwarmItPanel.class, "SwarmItPanel.apiUrlTextField.toolTipText")); // NOI18N

        apiUrlErrorMsgLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        apiUrlErrorMsgLabel.setForeground(new java.awt.Color(255, 0, 0));
        org.openide.awt.Mnemonics.setLocalizedText(apiUrlErrorMsgLabel, org.openide.util.NbBundle.getMessage(SwarmItPanel.class, "SwarmItPanel.apiUrlErrorMsgLabel.text")); // NOI18N

        javax.swing.GroupLayout apiUrlPanelLayout = new javax.swing.GroupLayout(apiUrlPanel);
        apiUrlPanel.setLayout(apiUrlPanelLayout);
        apiUrlPanelLayout.setHorizontalGroup(
            apiUrlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(apiUrlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(apiUrlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(apiUrlTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 588, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(apiUrlErrorMsgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 576, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        apiUrlPanelLayout.setVerticalGroup(
            apiUrlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(apiUrlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(apiUrlTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(apiUrlErrorMsgLabel)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        apiKeyPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(SwarmItPanel.class, "SwarmItPanel.apiKeyTitle.text"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N
        apiKeyPanel.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N

        apiKeyErrorMsgLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        apiKeyErrorMsgLabel.setForeground(new java.awt.Color(255, 0, 0));
        org.openide.awt.Mnemonics.setLocalizedText(apiKeyErrorMsgLabel, org.openide.util.NbBundle.getMessage(SwarmItPanel.class, "SwarmItPanel.apiKeyErrorMsgLabel.text")); // NOI18N

        apiKeyTextArea.setColumns(20);
        apiKeyTextArea.setRows(5);
        apiKeyTextArea.setText("ABCEDF1234567890"); // NOI18N
        apiKeyTextArea.setToolTipText(org.openide.util.NbBundle.getMessage(SwarmItPanel.class, "SwarmItPanel.apiKeyTextArea.toolTipText")); // NOI18N

        javax.swing.GroupLayout apiKeyPanelLayout = new javax.swing.GroupLayout(apiKeyPanel);
        apiKeyPanel.setLayout(apiKeyPanelLayout);
        apiKeyPanelLayout.setHorizontalGroup(
            apiKeyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(apiKeyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(apiKeyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(apiKeyTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, 567, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(apiKeyErrorMsgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 586, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        apiKeyPanelLayout.setVerticalGroup(
            apiKeyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, apiKeyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(apiKeyTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(apiKeyErrorMsgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        nctAmountPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(SwarmItPanel.class, "SwarmItPanel.nctAmountTitle.text"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        defaultNctAmountTextField.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        defaultNctAmountTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        defaultNctAmountTextField.setText(org.openide.util.NbBundle.getMessage(SwarmItPanel.class, "SwarmItPanel.defaultNctAmountTextField.text")); // NOI18N

        nctAmountUnitLabel.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(nctAmountUnitLabel, org.openide.util.NbBundle.getMessage(SwarmItPanel.class, "SwarmItPanel.nctAmountUnitLabel.text")); // NOI18N

        nctAmountErrorMsgLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        nctAmountErrorMsgLabel.setForeground(new java.awt.Color(255, 0, 0));
        org.openide.awt.Mnemonics.setLocalizedText(nctAmountErrorMsgLabel, org.openide.util.NbBundle.getMessage(SwarmItPanel.class, "SwarmItPanel.nctAmountErrorMsgLabel.text")); // NOI18N

        javax.swing.GroupLayout nctAmountPanelLayout = new javax.swing.GroupLayout(nctAmountPanel);
        nctAmountPanel.setLayout(nctAmountPanelLayout);
        nctAmountPanelLayout.setHorizontalGroup(
            nctAmountPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(nctAmountPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(nctAmountPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(nctAmountPanelLayout.createSequentialGroup()
                        .addComponent(defaultNctAmountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nctAmountUnitLabel))
                    .addComponent(nctAmountErrorMsgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        nctAmountPanelLayout.setVerticalGroup(
            nctAmountPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(nctAmountPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(nctAmountPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nctAmountUnitLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(defaultNctAmountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nctAmountErrorMsgLabel)
                .addContainerGap())
        );

        org.openide.awt.Mnemonics.setLocalizedText(testButton, org.openide.util.NbBundle.getMessage(SwarmItPanel.class, "SwarmItPanel.testButton.text")); // NOI18N
        testButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testButtonActionPerformed(evt);
            }
        });

        testConnectionStatusLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(testConnectionStatusLabel, org.openide.util.NbBundle.getMessage(SwarmItPanel.class, "SwarmItPanel.testConnectionStatusLabel.text")); // NOI18N

        javax.swing.GroupLayout testConnectionButtonPanelLayout = new javax.swing.GroupLayout(testConnectionButtonPanel);
        testConnectionButtonPanel.setLayout(testConnectionButtonPanelLayout);
        testConnectionButtonPanelLayout.setHorizontalGroup(
            testConnectionButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(testConnectionButtonPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(testButton)
                .addGap(18, 18, 18)
                .addComponent(testConnectionStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 489, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        testConnectionButtonPanelLayout.setVerticalGroup(
            testConnectionButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(testConnectionButtonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(testConnectionButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(testButton)
                    .addComponent(testConnectionStatusLabel))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(apiUrlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nctAmountPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(testConnectionButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(apiKeyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(apiUrlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(apiKeyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(nctAmountPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addComponent(testConnectionButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
        );
    }// </editor-fold>//GEN-END:initComponents

    @Messages({"SwarmItPanel.testConnectionStatusFailedLabel.text=Connection Failed.",
            "SwarmItPanel.testConnectionStatusSuccessLabel.text=Connection Successful."})
    private void testButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testButtonActionPerformed
        // TODO add action handling code here:
        // attempt to connect to API and attempt using creds
        // run test..
        // set             connectionTestStatus = ConnectionTestResult.TESTEDOK;
        // or set             connectionTestStatus = ConnectionTestResult.CONNECTION_FAILED;
        //
        // set here for testing purposes..
        connectionTestStatus = ConnectionTestResult.CONNECTION_FAILED;
        //
        if (connectionTestStatus == ConnectionTestResult.TESTEDOK) {
            testConnectionStatusLabel.setText(Bundle.SwarmItPanel_testConnectionStatusSuccessLabel_text());
            testConnectionStatusLabel.setForeground(new java.awt.Color(0, 0, 0));
        } else {
            testConnectionStatusLabel.setText(Bundle.SwarmItPanel_testConnectionStatusFailedLabel_text());
            testConnectionStatusLabel.setForeground(new java.awt.Color(255, 0, 0));
        }
        controller.changed();
    }//GEN-LAST:event_testButtonActionPerformed

    private void customizeComponents() {
        // read settings and initialize GUI
        apiKeyTextArea.setText(settings.getApiKey());
        apiUrlTextField.setText(settings.getApiUrl());
        defaultNctAmountTextField.setText(settings.getNctAmountString());

        // listen to changes in form fields and call controller.changed()
        apiKeyTextArea.getDocument().addDocumentListener(new MyDocumentListener());
        apiUrlTextField.getDocument().addDocumentListener(new MyDocumentListener());
        defaultNctAmountTextField.getDocument().addDocumentListener(new MyDocumentListener());

        // NOTE: We've disabled the API KEY and DEFAULT NCT AMOUNT fields,
        // since they are not currently used.
        // TODO: remove these next 2 lines when they are to be used.
        apiKeyTextArea.setEditable(false);
        defaultNctAmountTextField.setEditable(false);

        connectionTestStatus = ConnectionTestResult.UNTESTED;
    }

    private void clearErrorMessages() {
        // clear default error msgs
        apiUrlErrorMsgLabel.setText("");
        apiKeyErrorMsgLabel.setText("");
        nctAmountErrorMsgLabel.setText("");
        testConnectionStatusLabel.setText("");
    }

    void load() {
        clearErrorMessages();
        valid();
    }

    void store() {
        // store modified settings
        settings.saveSettings();
    }

    boolean testedOk() {
        return connectionTestStatus == ConnectionTestResult.TESTEDOK;
    }

    @Messages({"SwarmItPanel.testConnectionStatusUntestedLabel.text=Click Test Connection button to verify connectivity."})
    boolean enableTestButton(boolean enable) {
        testButton.setEnabled(enable);

        if (enable && connectionTestStatus == ConnectionTestResult.UNTESTED) {
            testConnectionStatusLabel.setText(Bundle.SwarmItPanel_testConnectionStatusUntestedLabel_text());
            testConnectionStatusLabel.setForeground(new java.awt.Color(255, 0, 0));
        }
        return true;
    }

    /**
     * Validate the API Key. Set error message if invalid.
     * 
     * @return true if valid, else false
     */
    boolean validApiKey() {
        boolean isValid = settings.setApiKey(apiKeyTextArea.getText());
        if (isValid == false) {
            apiKeyErrorMsgLabel.setText(NbBundle.getMessage(this.getClass(), "SwarmItPanel.apiKeyErrorMsgLabel.text"));
        }

        return isValid;
    }

    /**
     * Validate the URL
     * 
     * @return true if valid, else false
     */
    boolean validURL() {
        boolean isValid = settings.setApiUrl(apiUrlTextField.getText());
        if (isValid == false) {
            apiUrlErrorMsgLabel.setText(NbBundle.getMessage(this.getClass(), "SwarmItPanel.apiUrlErrorMsgLabel.text"));
        }
        
        return isValid;
    }
    
    /**
     * Validate the NCT amount is a positive decimal number.
     * 
     * @return true if valid, else false
     */
    @Messages({"SwarmItPanel.nctAmountErrorMsgNFE.text=NCT Amount is invalid. Must be a number greater than 0.0."})
    boolean validNCTAmount() {
        boolean isValid = settings.setNctAmount(defaultNctAmountTextField.getText());
        if (isValid == false) {
            nctAmountErrorMsgLabel.setText(Bundle.SwarmItPanel_nctAmountErrorMsgNFE_text());
            LOGGER.log(Level.WARNING, "NCT Amount is invalid. Must be greater than 0.0.");
        }
        return isValid;
    }

    /**
     * Validate the fields are completed correctly and that a connection test
     * was successful.
     * 
     * @return true if all valid and successful test, else false
     */
    boolean valid() {
        // check whether form data is complete and has valid content
        // check each element so we get error nofications for all invalid fields.
        boolean result = true;

        result &= validApiKey();
        result &= validURL();
        result &= validNCTAmount();
        
        // if fields are populated correctly, enable the test button
        enableTestButton(result);
        
        // the form is only valid after a successful test
        result &= testedOk();
        return result;
    }

    /**
     * Used to listen for changes in text boxes. It lets the panel know things
     * have been updated and that validation needs to happen.
     */
    private class MyDocumentListener implements DocumentListener {

        @Override
        public void changedUpdate(DocumentEvent e) {
            // Plain text components do not fire these events
            clearErrorMessages();
            connectionTestStatus = ConnectionTestResult.UNTESTED;
            controller.changed();
        }

        @Override
        public void insertUpdate(DocumentEvent e) {
            clearErrorMessages();
            connectionTestStatus = ConnectionTestResult.UNTESTED;
            controller.changed();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            clearErrorMessages();
            connectionTestStatus = ConnectionTestResult.UNTESTED;
            controller.changed();
        }
    }

    private enum ConnectionTestResult {
        UNTESTED,
        CONNECTION_FAILED,
        TESTEDOK;
    }
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel apiKeyErrorMsgLabel;
    private javax.swing.JPanel apiKeyPanel;
    private javax.swing.JTextArea apiKeyTextArea;
    private javax.swing.JLabel apiUrlErrorMsgLabel;
    private javax.swing.JPanel apiUrlPanel;
    private javax.swing.JTextField apiUrlTextField;
    private javax.swing.JTextField defaultNctAmountTextField;
    private javax.swing.JLabel nctAmountErrorMsgLabel;
    private javax.swing.JPanel nctAmountPanel;
    private javax.swing.JLabel nctAmountUnitLabel;
    private javax.swing.JButton testButton;
    private javax.swing.JPanel testConnectionButtonPanel;
    private javax.swing.JLabel testConnectionStatusLabel;
    // End of variables declaration//GEN-END:variables
}
